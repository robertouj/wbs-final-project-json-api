#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();
const app = require("../app");
const debug = require("debug")("api-basic-test:server");
const http = require("http");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/************************************* socket  *************************************/
const io = require("socket.io")(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

io.on("connection", (socket) => {
  socket.emit("me", socket.id);

  socket.on("create or join", (roomId, name) => {
    const clientsInRoom = io.sockets.adapter.rooms.get(roomId)?.size;
    const numClients = clientsInRoom ? clientsInRoom : 0;

    if (numClients === 0) {
      socket.join(roomId);
      socket.emit("room created");
    } else if (numClients === 1) {
      io.sockets.in(roomId).emit("join");
      socket.join(roomId);
      socket.emit("joined");
      const users = Array.from(io.sockets.adapter.rooms.get(roomId));
      io.sockets.in(roomId).emit("ready", users);
    } else {
      socket.emit("full", roomId);
    }
  });

  socket.on("callUser", ({ userToCall, signalData, from, name }) => {
    io.to(userToCall).emit("callUser", { signal: signalData, from, name });
  });

  socket.on("answerCall", ({ signal, to, name }) => {
    io.to(to).emit("callAccepted", signal, to, name);
  });

  /********************** chat **********************/
  socket.on("chat message", (msg) => {
    socket.broadcast.emit("chat message", msg);
  });

  //TODO: Possibly useful functions
  // // convenience function to log server messages on the client
  // function log() {
  //   const array = ["Message from server: "];
  //   array.push.apply(array, arguments);
  //   socket.emit("log", arguments);
  // }

  // socket.on("ipaddr", function () {
  //   var ifaces = os.networkInterfaces();
  //   for (var dev in ifaces) {
  //     ifaces[dev].forEach(function (details) {
  //       if (details.family === "IPv4" && details.address !== "127.0.0.1") {
  //         socket.emit("ipaddr", details.address);
  //       }
  //     });
  //   }
  // });
});
/************************************* socket  *************************************/

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () =>
  console.log(`Started up server on port ${port}`.rainbow.bold.inverse)
);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
